{
  "compilerOptions": {
    // project options
    "lib": [
      "ESNext",
      "dom"
    ], // specifies which default set of type definitions to use ("DOM", "ES6", etc)
    "outDir": "ts/dist", // .js (as well as .d.ts, .js.map, etc.) files will be emitted into this directory.,
    "removeComments": true, // Strips all comments from TypeScript files when converting into JavaScript- you rarely read compiled code so this saves space
    "target": "ES6", // Target environment. Most modern browsers support ES6, but you may want to set it to newer or older. (defaults to ES3)
    "module": "ES6",

    // Module resolution
    "baseUrl": "./ts/", // Lets you set a base directory to resolve non-absolute module names.
    "esModuleInterop": true, // fixes some issues TS originally had with the ES6 spec where TypeScript treats CommonJS/AMD/UMD modules similar to ES6 module
    "moduleResolution": "node", // Pretty much always node for modern JS. Other option is "classic"
    "paths": {}, // A series of entries which re-map imports to lookup locations relative to the baseUrl

    // Source Map
    //"sourceMap": false, // enables the use of source maps for debuggers and error reporting etc
    //"sourceRoot": "/ts/", // Specify the location where a debugger should locate TypeScript files instead of relative source locations.

    // Strict Checks
    "alwaysStrict": true, // Ensures that your files are parsed in the ECMAScript strict mode, and emit “use strict” for each source file.
    "allowUnreachableCode": false, // pick up dead code paths
    "noImplicitAny": true, // In some cases where no type annotations are present, TypeScript will fall back to a type of any for a variable when it cannot infer the type.
    "strictNullChecks": true, // When strictNullChecks is true, null and undefined have their own distinct types and you’ll get a type error if you try to use them where a concrete value is expected.

    // Linter Checks
    "noImplicitReturns": true,
    "noUncheckedIndexedAccess": false, // accessing index must always check for undefined
    "noUnusedLocals": false, // Report errors on unused local variables.
    "noUnusedParameters": true // Report errors on unused parameters in functions
  },
  "include": ["./**/*.ts"],
  "exclude": [
    "node_modules/**/*"
  ]
}

// {
//   "compilerOptions": {
//     /* Basic Options */
//     "target": "esnext",                          /* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019' or 'ESNEXT'. */
//     "module": "es6",                     /* Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', or 'ESNext'. */
//     "lib": ["esnext", "dom"],                             /* Specify library files to be included in the compilation. */
//     // "allowJs": true,                       /* Allow javascript files to be compiled. */
//     // "checkJs": true,                       /* Report errors in .js files. */
//     // "jsx": "preserve",                     /* Specify JSX code generation: 'preserve', 'react-native', or 'react'. */
//     // "declaration": true,                   /* Generates corresponding '.d.ts' file. */
//     // "declarationMap": true,                /* Generates a sourcemap for each corresponding '.d.ts' file. */
//     // "sourceMap": true,                     /* Generates corresponding '.map' file. */
//     // "outFile": "./ts/platformView.js",                       /* Concatenate and emit output to single file. */
//     "outDir": "./ts/dist",                        /* Redirect output structure to the directory. */
//     // "rootDir": "./",                       /* Specify the root directory of input files. Use to control the output directory structure with --outDir. */
//     // "composite": true,                     /* Enable project compilation */
//     // "incremental": true,                   /* Enable incremental compilation */
//     // "tsBuildInfoFile": "./",               /* Specify file to store incremental compilation information */
//     // "removeComments": true,                /* Do not emit comments to output. */
//     // "noEmit": true,                        /* Do not emit outputs. */
//     // "importHelpers": true,                 /* Import emit helpers from 'tslib'. */
//     // "downlevelIteration": true,            /* Provide full support for iterables in 'for-of', spread, and destructuring when targeting 'ES5' or 'ES3'. */
//     // "isolatedModules": true,               /* Transpile each file as a separate module (similar to 'ts.transpileModule'). */

//     /* Strict Type-Checking Options */
//     "strict": true,                           /* Enable all strict type-checking options. */
//     // "noImplicitAny": true,                 /* Raise error on expressions and declarations with an implied 'any' type. */
//     // "strictNullChecks": true,              /* Enable strict null checks. */
//     // "strictFunctionTypes": true,           /* Enable strict checking of function types. */
//     // "strictBindCallApply": true,           /* Enable strict 'bind', 'call', and 'apply' methods on functions. */
//     // "strictPropertyInitialization": true,  /* Enable strict checking of property initialization in classes. */
//     // "noImplicitThis": true,                /* Raise error on 'this' expressions with an implied 'any' type. */
//     // "alwaysStrict": true,                  /* Parse in strict mode and emit "use strict" for each source file. */

//     /* Additional Checks */
//     // "noUnusedLocals": true,                /* Report errors on unused locals. */
//     // "noUnusedParameters": true,            /* Report errors on unused parameters. */
//     // "noImplicitReturns": true,             /* Report error when not all code paths in function return a value. */
//     // "noFallthroughCasesInSwitch": true,    /* Report errors for fallthrough cases in switch statement. */

//     /* Module Resolution Options */
//     // "moduleResolution": "node",            /* Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6). */
//     // "baseUrl": "./",                       /* Base directory to resolve non-absolute module names. */
//     // "paths": {},                           /* A series of entries which re-map imports to lookup locations relative to the 'baseUrl'. */
//     "rootDirs": ["ts"],                        /* List of root folders whose combined content represents the structure of the project at runtime. */
//     //"typeRoots": ["ts"],                       /* List of folders to include type definitions from. */
//     //"types": ["./ts/types.d.ts"],                           /* Type declaration files to be included in compilation. */
//     // "allowSyntheticDefaultImports": true,  /* Allow default imports from modules with no default export. This does not affect code emit, just typechecking. */
//     "esModuleInterop": true                   /* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */
//     // "preserveSymlinks": true,              /* Do not resolve the real path of symlinks. */

//     /* Source Map Options */
//     // "sourceRoot": "",                      /* Specify the location where debugger should locate TypeScript files instead of source locations. */
//     // "mapRoot": "",                         /* Specify the location where debugger should locate map files instead of generated locations. */
//     // "inlineSourceMap": true,               /* Emit a single file with source maps instead of having a separate file. */
//     // "inlineSources": true,                 /* Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set. */

//     /* Experimental Options */
//     // "experimentalDecorators": true,        /* Enables experimental support for ES7 decorators. */
//     // "emitDecoratorMetadata": true,         /* Enables experimental support for emitting type metadata for decorators. */
//   }
// }
